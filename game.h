#pragma once
#include"ship.h"
#include"carrier.h"
#include"battleship.h"
#include"cruiser.h"
#include"destroyer.h"
class Game {
protected:
	bool cannonDamaged = false;
	bool nextPlayerUsed[2] = { false,false };
	bool extendedShips = false;
	bool allShipsPresent = false;
	bool outOfRange = false;
	bool shipToClose = false;
	bool outside = false;
	bool onReef = false;
	int range = 0;
	int numberOfReefs = 0;
	char shipClass[4];
	int directionNumber = 0;
	int oppositeDirectionNumber = 0;
	const int directionArray[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
	const int numberOfShips = 10;
	const int playersNumber = 2;
	const int playerA = 0;
	bool allShipsPlaced = false;
	int index = 0;
	const int exist = 1;
	char trafione[8][10];
	int flotaA = 0;
	int flotaB = 0;
	int shipsPlacedA[4];
	int shipsPlacedB[4];
	const int playerB = 1;
	int numberOfCarriers= 1;
	int numberOfBattleships= 2;
	int numberOfCruisers = 3;
	int numberOfDestroyers=4;
	int numberOfCarriersB = 1;
	int numberOfBattleshipsB = 2;
	int numberOfCruisersB = 3;
	int numberOfDestroyersB = 4;
	int totalFleetA = numberOfCarriers + numberOfBattleships + numberOfCruisers + numberOfDestroyers;
	int totalFleetB = numberOfCarriersB + numberOfBattleshipsB + numberOfCruisersB + numberOfDestroyersB;
	Carrier* carriers = new Carrier[numberOfCarriers];
	Battleship* battleships = new Battleship[numberOfBattleships];
	Cruiser* cruisers = new Cruiser[numberOfCruisers];
	Destroyer* destroyers = new Destroyer[numberOfDestroyers];
	Carrier* carriersB = new Carrier[numberOfCarriersB];
	Battleship* battleshipsB = new Battleship[numberOfBattleshipsB];
	Cruiser* cruisersB = new Cruiser[numberOfCruisersB];
	Destroyer* destroyersB = new Destroyer[numberOfDestroyersB];
	int totalShipsPlacedA=0;
	int totalShipsPlacedB=0;
	bool aShooted =true;
	char tab[6]="11111";
	int shotsTakenA[4][4]={{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0} };
	int shotsTakenB[4][4]={{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}};
	int movesMadeA[4][4] = { {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0} };
	int movesMadeB[4][4] = { {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0} };
	const static int damaged =2;
	const static int taken = 1;
	const static int empty = 0;
	const static int reef =-10;
	const static int engine = 3;
	const static int cannon = 4;
	const static int radar = 5;
	const static int destroyer = 3;
	const static int cruiser = 2;
	const static int battleship = 1;
	const static int carrier = 0;
	int boundYmin[2];
	int boundYmax[2];
	int boundXmin[2];
	int boundXmax[2];
	bool endOfGame = false;
	const char invalidOperation[19] = "INVALID OPERATION";
	int sizeX=0, sizeY=0;
	const static char east ='E';
	const static char west ='W';
	const static char south = 'S';
	const static char north = 'N';
	const static char forward = 'F';
	const static char moveLeft = 'L';
	const static char moveRight = 'R';
	int** board;
	bool** isVisible;
	bool** isVisibleB;
	bool playerPrintingOn = false;
	int x=0, y=0;
	int *positionY=&y, *positionX=&x;
	int input=50;
	char* command = new char[input];
	Ship* pointer{};
	bool shipPlace=false;
	char player='A';
	char direction='N';
	int cz=0;
	int *parts=&cz;
	int whoPlays = playerA;
	int* kolejka = &whoPlays;
	int forbiddenY[15];
	int forbiddenX[15];
public:
	void setBoard(int **board);
	void displayBoard(int **board);
	void setParts(int* parts);
	~Game();
	Game(int** board,int sizeX,int sizeY,int*parts);
	void shoot(int*,int*,int**);
	void setFleet(Ship*pointer,int*,int*,char,int*);
	void takePlaces(Ship* pointer, int** board, int length,char direction,int*,int*);
	void turn();
	void moveShip(Ship*pointer,char command[50]);
	void setShip(Ship* pointer, bool);
	void resetLeft(int**,int, int*, int*);
	void resetDown(int**,int, int*, int*);
	void resetRight(int**,int, int*, int*);
	void resetUp(int**,int, int*, int*);
	void gameLoop(int *kolejka);
	bool winB(int* parts);
	bool winA(int* parts);
	void takeNewPlaces(Ship*pointer,int);
	void rotateLeft(Ship*pointer,int length);
	void rotateRight(Ship*pointer,int length);
	void extendedPrinting(int**board);
	void setEngine(Ship*pointer,int *positionY,int *positionX,int length,char direction);
	void setShooted(bool s);
	void setBoardSize(int sizeY,int sizeX,int**board);
	void setShip2(Ship*pointer);
	void initPosition();
	void setReef();
	void out(Ship*);
	void extendedShooting(Ship*pointer);
	void setTo0(int);
	void radarRange(Ship*pointer);
	void saveGame();
	void reset(int**, int, int*, int*);
	char* getTrafione(char tarfione[][10], Ship* pointer, int length,bool);
	void spy(int *,int*positionX);
};